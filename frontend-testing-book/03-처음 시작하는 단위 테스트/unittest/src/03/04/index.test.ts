import { add, sub } from ".";

/**
 * 테스트는 테스트할 모듈이 의도대로 구현됐는지 검증할 때 도움이 된다
 * 특히 사양이 복잡할 수 록 조건 분기에서 버그가 많이 생긴다
 */

// test 함수를 사용할 때는 테스트 코드가 어떤 의도로 작성됐으며, 어떤 작업이 포함됐는지 테스트 명으로 명확하게 표현해야 한다
test("반환값은 첫 번째 매개변수와 두 번째 매개 변수를 더한 값이다", () => {
  expect(add(50, 50)).toBe(100);
});

test("반환값의 상한은 100이다", () => {
  expect(add(70, 80)).toBe(100);
});

test("반환값은 첫 번째 매개변수에서 두 번째 매개변수를 뺀 값이다", () => {
  expect(sub(51, 50)).toBe(1);
});

test("반환값의 하한은 0이다", () => {
  expect(sub(70, 80)).toBe(0);
});

describe("사칙연산", () => {
  describe("add", () => {
    test("반환값은 첫 번째 매개변수와 두 번째 매개변수를 더한 값이다", () => {
      expect(add(50, 50)).toBe(100);
    });
    test("반환값의 상한은 '100'이다", () => {
      expect(add(70, 80)).toBe(100);
    });
  });
  describe("sub", () => {
    test("반환값은 첫 번째 매개변수에서 두 번째 매개변수를 뺀 값이다", () => {
      expect(sub(51, 50)).toBe(1);
    });
    test("반환값의 하한은 '0'이다", () => {
      expect(sub(70, 80)).toBe(0);
    });
  });
});
